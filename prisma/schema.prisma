// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  walletAddress String?  @unique
  email         String?  @unique
  username      String   @unique
  password      String? // For email/password auth
  bio           String?
  profileImage  String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  reposts               Repost[]
  tipsGiven             Tip[]          @relation("TipsGiven")
  tipsReceived          Tip[]          @relation("TipsReceived")
  followers             Follow[]       @relation("Followers")
  following             Follow[]       @relation("Following")
  channels              Channel[]      @relation("ChannelMembers")
  ownedChannels         Channel[]      @relation("ChannelOwner")
  accounts              Account[]
  sessions              Session[]
  conversationsA        Conversation[] @relation("ConversationA")
  conversationsB        Conversation[] @relation("ConversationB")
  messagesSent          Message[]      @relation("MessageSender")
  messagesReceived      Message[]      @relation("MessageRecipient")
  notificationsReceived Notification[] @relation("NotificationRecipient")
  notificationsSent     Notification[] @relation("NotificationActor")

  @@map("users")
}

model Post {
  id            String   @id @default(cuid())
  content       String
  imageUrl      String?
  likesCount    Int      @default(0)
  repostsCount  Int      @default(0)
  commentsCount Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  reposts       Repost[]
  tips          Tip[]
  notifications Notification[]

  @@map("posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String
  userId    String

  // Relations
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Notification Notification[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("likes")
}

model Repost {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  postId    String
  userId    String

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@map("reposts")
}

model Follow {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  followerId  String
  followingId String

  // Relations
  follower  User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Tip {
  id                   String   @id @default(cuid())
  amount               Decimal
  transactionSignature String?  @unique
  createdAt            DateTime @default(now())
  fromUserId           String
  toUserId             String
  postId               String?

  // Relations
  fromUser User  @relation("TipsGiven", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User  @relation("TipsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
  post     Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("tips")
}

model Channel {
  id           String   @id @default(cuid())
  name         String
  description  String?
  tokenAddress String? // Required token to access
  minBalance   Decimal? // Minimum token balance required
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ownerId      String

  // Relations
  owner   User   @relation("ChannelOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members User[] @relation("ChannelMembers")

  @@map("channels")
}

model Conversation {
  id             String    @id @default(cuid())
  participantAId String
  participantBId String
  createdAt      DateTime  @default(now())
  messages       Message[]

  participantA User @relation("ConversationA", fields: [participantAId], references: [id], onDelete: Cascade)
  participantB User @relation("ConversationB", fields: [participantBId], references: [id], onDelete: Cascade)

  @@unique([participantAId, participantBId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  recipientId    String
  content        String
  createdAt      DateTime @default(now())

  conversation Conversation   @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User           @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient    User           @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@map("messages")
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum NotificationType {
  LIKE
  COMMENT
  REPOST
  MESSAGE
  FOLLOW
}

model Notification {
  id        String           @id @default(cuid())
  userId    String // recipient
  actorId   String // who triggered
  type      NotificationType
  postId    String?
  commentId String?
  messageId String?
  createdAt DateTime         @default(now())
  read      Boolean          @default(false)

  user    User     @relation("NotificationRecipient", fields: [userId], references: [id], onDelete: Cascade)
  actor   User     @relation("NotificationActor", fields: [actorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  message Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
